"""
Application config for the common app

AND

Start consumer thread for consuming event store messages
"""
from django.apps import AppConfig
import sys


class CommonConfig(AppConfig):
    name = "common"

    def message_handlers(self):
        pass

    def ready(self):
        """
        Following section is for starting the event consumer thread.
        The thread reads the events from a kafka topic where all
        microservices are publishing and listening for events. When a
        microservice reads an event it is concerned with, it
        executes the conditional logic inside the consume_events
        method.

        This check prevents the event consumer thread from being started,
        if the management command executed is any other than 'runserver'
        command. If this check is removed, the consumer thread will get
        started on other management commands like 'makemigrations' 'migrate'
        and the command will not automatically terminate like it should
        which we don't want. We want the thread to start only on 'runserver'
        """
        # print(sys.argv)
        if not (
            "runserver" in sys.argv
            or "be_fms_driver_management.wsgi:application" in sys.argv
        ):
            return

        import json
        import logging
        from threading import Thread
        from kafka import KafkaConsumer, OffsetAndMetadata, TopicPartition
        from common.kafka.consumer import (
            CustomerProxyEventHandler,
            UserProxyEventHandler,
            FleetProxyEventHandler,
        )
        from common.utils import required
        from djangokafka.settings import (
            KAFKA_EVENTS_TOPIC,
            KAFKA_EVENTS_BROKER,
            KAFKA_AUTOCOMMIT_OFFSET,
            KAFKA_EVENTS_TOPIC_CONSUMER_GROUP,
            KAFKA_CONSUME_EVENTS,
            DEBUG,
        )
        from common.utils import DeviceEventHandler

        # Do not consume events if kafka consumer disabled in settings
        if not KAFKA_CONSUME_EVENTS:
            return

        # Get logger
        logger = logging.getLogger(__name__)

        def consume_events():
            """Event consumer to consume events generated by other
            microservices on the KAFKA_EVENTS_TOPIC

            """
            # To consume latest messages and auto-commit offsets

            consumer = KafkaConsumer(
                KAFKA_EVENTS_TOPIC,
                bootstrap_servers=[KAFKA_EVENTS_BROKER],
                group_id=KAFKA_EVENTS_TOPIC_CONSUMER_GROUP,
                enable_auto_commit=KAFKA_AUTOCOMMIT_OFFSET,
            )

            for message in consumer:
                # print("Received message: ", message)
                is_required, event = required(message)
                if not is_required:
                    continue

                try:
                    # If event type is model (A model was created/updated or del)
                    if json.loads(message.value).get("event_type", None) == "model":
                        json.loads(message.value).get("instance", None)

                    event_name = event.get("event_name", None)
                    source = event.get("source", None)

                    if not event_name:
                        raise ValueError(
                            "Cannot process event, 'name' not \
                        found in event value"
                        )

                    if not source:
                        raise ValueError(
                            "Cannot process source, 'source' not \
                        found in event value"
                        )

                    """
                    To handle any event, Add check for event name here and
                    call the handler defined in handlers module.
                    """
                    user_handler = UserProxyEventHandler()
                    if event_name == "login":
                        user_handler.login_user(event)

                    if event_name == "failure_event":
                        raise ValueError("FAILURE EVENT HANDLER CALLED")

                    if event_name == "success_event":
                        print("SUCCESS EVENT HANDLER CALLED")

                    """
                    Commit offset if auto-commit is turned off
                    Manual offset commit, this code section will always be
                    at the end of the for statement
                    """
                    if not KAFKA_AUTOCOMMIT_OFFSET:
                        # print(KAFKA_AUTOCOMMIT_OFFSET)
                        # print(KAFKA_AUTOCOMMIT_OFFSET)
                        # print(KAFKA_AUTOCOMMIT_OFFSET)
                        tp = TopicPartition(message.topic, message.partition)
                        offsets = {tp: OffsetAndMetadata(message.offset + 1, None)}
                        consumer.commit(offsets=offsets)

                except Exception as ex:
                    logger.exception(ex, stack_info=DEBUG)

        event_consumer_thread = Thread(target=consume_events, args=())

        event_consumer_thread.start()
